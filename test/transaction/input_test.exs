defmodule BitcoinLib.Transaction.InputTest do
  use ExUnit.Case, async: true

  doctest BitcoinLib.Transaction.Input

  alias BitcoinLib.Transaction.Input

  test "encode an input" do
    input = %BitcoinLib.Transaction.Input{
      script_sig:
        <<0x493046022100DB04F98ECC28E029A1A53EE7E397CF6057EAC632431FA7EC144FBC13551B4F2B022100C24349E03EB24C7FE6603B9D578294D7A135864D6A1ACFE613EC7E206675E899012102702DED1CCA9816FA1A94787FFC6F3ACE62CD3B63164F76D227D0935A33EE48C3::864>>,
      sequence: 0xFFFFFFFF,
      txid: "e4c226432a9319d603b2ed1fa609bffe4cd91f89b3176a9e73b19f7891a92bb6",
      vout: 0
    }

    encoded_input = input |> Input.encode()

    assert <<0xB62BA991789FB1739E6A17B3891FD94CFEBF09A61FEDB203D619932A4326C2E4000000006C493046022100DB04F98ECC28E029A1A53EE7E397CF6057EAC632431FA7EC144FBC13551B4F2B022100C24349E03EB24C7FE6603B9D578294D7A135864D6A1ACFE613EC7E206675E899012102702DED1CCA9816FA1A94787FFC6F3ACE62CD3B63164F76D227D0935A33EE48C3FFFFFFFF::1192>> ==
             encoded_input
  end

  test "decode and encode an input, making sure it returns the same value" do
    original_input =
      <<0xB62BA991789FB1739E6A17B3891FD94CFEBF09A61FEDB203D619932A4326C2E4000000006C493046022100DB04F98ECC28E029A1A53EE7E397CF6057EAC632431FA7EC144FBC13551B4F2B022100C24349E03EB24C7FE6603B9D578294D7A135864D6A1ACFE613EC7E206675E899012102702DED1CCA9816FA1A94787FFC6F3ACE62CD3B63164F76D227D0935A33EE48C3FFFFFFFF::1192>>

    {:ok, input, remaining} =
      original_input
      |> Input.extract_from()

    decoded_encoded_input =
      input
      |> Input.encode()

    assert <<>> == remaining
    assert original_input == decoded_encoded_input
  end
end
